#makefile for cosine2.cpp

CC = c++

CFLAGSLIB = -Wall  -std=c++14 

#valid values for MAXFIELDTERMS are defined in cosine2.h, i.e.: 100,200, 500, 1000, 2000, 3000, 4000, 5000
MAXFIELDTERMS=MAXFIELDTERMS2000

#enable one CFLAGS and run ./cos sequentially

#prepare constants
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D GENERATECONSTARRAY
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D VERIFYCONSTARRAY

#simulation -- not used due to long calculation time. it is preferred to calculate at each time-value separately
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D ONEPOINT
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D RUNSIMULATION

#calculate arrays for one time-value
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D CREATETIMEARRAYS
#use the arrays to calculate for multiple space points
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D USETIMEARRAYS

#merge data files into a single file if additional space points are calculated
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D DATAEMFLOATTODOUBLE -D MERGESPACE

#process the data files generated by USETIMEARRAYS. run some of them if needed. do not need to run them all. these operations are independent. 
CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D DATAEMFLOATTODOUBLE -D CONVERTTODOUBLE
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D DATAEMFLOATTODOUBLE -D GENERATECOMPAREFILES
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D DATAEMFLOATTODOUBLE -D GENERATEDIFFFILES
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D DATAEMFLOATTODOUBLE -D GENERATEDIFFFILEVS

#not used. for debugging only
#CFLAGS = -Wall  -std=c++14 -D $(MAXFIELDTERMS) -D USETIMEARRAYS -D EXAMINETIMEARRAYS


EMDIRS = -Icosine1D -IFileUtil -IMemoryMan -IthreadBatch

EMLibs = -lgmp  -lMemoryMan -lthreadBatch -lFileUtil

all :  FileUtillib MemoryManlib threadBatchlib EMexe

FileUtillib:  
	$(CC) $(CFLAGSLIB) -c -o lib/fileutil.o ../FileUtil/fileutil.cpp
	$(CC) $(CFLAGSLIB) -c -o lib/taskFile.o ../FileUtil/taskFile.cpp
	ar cr lib/libFileUtil.a lib/fileutil.o lib/taskFile.o
	ranlib lib/libFileUtil.a

MemoryManlib:
	$(CC) $(CFLAGSLIB) -c -o lib/MemoryMan.o ../MemoryMan/MemoryManager.cpp
	ar cr lib/libMemoryMan.a lib/MemoryMan.o
	ranlib lib/libMemoryMan.a

threadBatchlib:
	$(CC) $(CFLAGSLIB) -c -o lib/ThreadBatch.o      ../threadBatch/ThreadBatch.cpp 
	$(CC) $(CFLAGSLIB) -c -o lib/LoopWorkDivider.o  ../threadBatch/LoopWorkDivider.cpp
	$(CC) $(CFLAGSLIB) -c -o lib/ErrorThreadBatch.o ../threadBatch/ErrorThreadBatch.cpp
	$(CC) $(CFLAGSLIB) -c -o lib/loopDivide.o       ../threadBatch/loopDivide.cpp
	ar cr lib/libthreadBatch.a lib/ThreadBatch.o lib/LoopWorkDivider.o lib/ErrorThreadBatch.o lib/loopDivide.o
	ranlib lib/libthreadBatch.a

#EMexe:
#	$(CC) $(CFLAGS) -c -o lib/emfloat.o EMFloat.cpp
#	$(CC) $(CFLAGS) -c -o lib/emCos.o cosine2.cpp
#	$(CC) $(EMDIRS) -L./lib -pthread -o cos lib/emfloat.o lib/emCos.o $(EMLibs)

EMexe:
	$(CC) $(CFLAGS) -c -o lib/emCos.o cosine2.cpp
	$(CC) $(EMDIRS) -L./lib -pthread -o cos lib/emCos.o $(EMLibs)


clean:
	rm -rf lib/*.o lib/*.a lib/*.~

